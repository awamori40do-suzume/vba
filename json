# ネストされたデータ構造
traffic_data = {
    "hoge": [
        {"hoge2": {"pps": 80, "test": "aaa"}},
        {"hoge2": {"pps": 90, "test": "bbb"}},
        {"hoge2": {"pps": 100, "test": "ccc"}}
    ]
}

# クエリパラメータ取得（例: ?pps=80,90）
pps_filter = context.params.get("pps")  # カンマ区切りで渡す

if not pps_filter:
    context.session.finish({"error": "ppsパラメータが必要です"})

# 数値のリストに変換
try:
    pps_list = [int(p.strip()) for p in pps_filter.split(",")]
except:
    context.session.finish({"error": "ppsは整数のカンマ区切りで指定してください"})

# 絞り込み
result = []
for item in traffic_data["hoge"]:
    pps_val = item["hoge2"]["pps"]
    if pps_val in pps_list:
        result.append(item["hoge2"])

# 結果返却
context.session.finish({
    "traffic": result
})


traffic_data = [
    {"hoge2": {"pps": "80", "test": "aaa"}},
    {"hoge2": {"pps": "90", "test": "bbb"}},
    {"hoge2": {"pps": "100", "test": "ccc"}}
]

# クエリパラメータ取得
pps_param = context.params.get("pps")

# デバッグ用出力のために初期化
pps_list = []

if pps_param:
    try:
        # 文字列をカンマで分割し、stripして整数へ変換 → 再び文字列へ（"80"のように比較）
        parts = pps_param.split(",")
        pps_list = [str(int(p.strip())) for p in parts]
    except Exception as e:
        context.session.finish({
            "error": "ppsは整数のカンマ区切りで指定してください",
            "debug": {
                "pps_param": pps_param,
                "split_parts": parts,
                "exception": str(e)
            }
        })

# ppsマッチしたデータのみ抽出（pps指定があった場合）
if pps_list:
    filtered = []
    for entry in traffic_data:
        pps_value = entry["hoge2"]["pps"]
        if pps_value in pps_list:
            filtered.append(entry)
else:
    filtered = traffic_data

# 結果返却
context.session.finish({
    "traffic": filtered
})


# スタブデータ
traffic_data = [
    {"hoge2": {"pps": 80, "test": "aaa"}},
    {"hoge2": {"pps": 90, "test": "bbb"}},
    {"hoge2": {"pps": 100, "test": "ccc"}}
]

# クエリパラメータ取得
pps_param = context.params.get("pps")

if not pps_param:
    context.session.finish({
        "error": "ppsパラメータが指定されていません"
    })

try:
    # クエリ文字列（例: "80,90"）を整数リストに変換
    pps_list = [int(p.strip()) for p in pps_param.split(",")]
except Exception:
    context.session.finish({
        "error": "ppsは整数のカンマ区切りで指定してください",
        "debug": pps_param
    })

# フィルタリング処理（ppsの値が指定されたものに一致するデータのみ）
filtered_data = []
for item in traffic_data:
    inner = item.get("hoge2", {})
    if inner.get("pps") in pps_list:
        filtered_data.append(item)

# 応答を返す
context.session.finish({
    "filtered_traffic": filtered_data
})


# スタブデータ（文字列の "pps" を使用）
traffic_data = [
    {"hoge2": {"pps": "80", "test": "aaa"}},
    {"hoge2": {"pps": "90", "test": "bbb"}},
    {"hoge2": {"pps": "100", "test": "ccc"}}
]

# クエリパラメータ取得（"80,90" など）
pps_param = context.params.get("pps")

# 絞り込み処理
if pps_param:
    # カンマ区切りをリスト化（["80", "90"] など）
    pps_list = pps_param.split(",")
    
    # ppsが一致するデータだけ抽出（すべて文字列として比較）
    filtered = []
    for entry in traffic_data:
        if entry["hoge2"]["pps"] in pps_list:
            filtered.append(entry)
    
    # 結果返却
    context.session.finish({"traffic": filtered})
else:
    # パラメータがなければ全件返す
    context.session.finish({"traffic": traffic_data})


# スタブデータ
traffic_data = [
    {"hoge2": {"pps": "80", "test": "aaa"}},
    {"hoge2": {"pps": "90", "test": "bbb"}},
    {"hoge2": {"pps": "100", "test": "ccc"}}
]

# クエリパラメータ取得
pps_param = context.params.get("pps")

# ppsパラメータがあるか確認
if pps_param:
    # リスト or 文字列 両対応
    if isinstance(pps_param, list):
        pps_list = pps_param
    else:
        pps_list = pps_param.split(",")

    # 絞り込み
    filtered = []
    for entry in traffic_data:
        if entry["hoge2"]["pps"] in pps_list:
            filtered.append(entry)

    context.session.finish({"traffic": filtered})
else:
    # クエリが無ければ全件返す
    context.session.finish({"traffic": traffic_data})
