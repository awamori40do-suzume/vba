from datetime import datetime

# サンプルデータ
traffic_data = [
    {"time": "2024-06-01T00:00:00Z", "bps": 1000, "pps": 200},
    {"time": "2024-06-01T01:00:00Z", "bps": 1500, "pps": 250},
    {"time": "2024-06-01T02:00:00Z", "bps": 1800, "pps": 270}
]

# クエリ取得（list型なので index 0 で取り出す）
from_param = context.request.params.get("from")
if from_param:
    from_time_str = from_param[0]
    try:
        from_time = datetime.strptime(from_time_str, "%Y-%m-%dT%H:%M:%SZ")
        # フィルタリング
        filtered = [t for t in traffic_data if datetime.strptime(t["time"], "%Y-%m-%dT%H:%M:%SZ") >= from_time]
        context.session.finish({"traffic": filtered})
    except Exception as e:
        context.session.set_status(400)
        context.session.finish({"error": "Invalid 'from' datetime format"})
else:
    # クエリが無い場合はすべて返す
    context.session.finish({"traffic": traffic_data})

employments = await atom.Yoshida_Test.retrieve()
context.session.finish([e.to_dict() for e in employments])

employments = await atom.Yoshida_Test.retrieve()
results = []
for e in employments:
    results.append({
        "entryNumber": e.entryNumber,
        "firstName": e.firstName,
        "lastName": e.lastName,
        "email": e.email,
        "salaryRequirements": e.salaryRequirements
    })
context.session.finish({"Yoshida_Test_List": results})


ここから日付
def zero_pad(n):
    return "0" + str(n) if n < 10 else str(n)

dates = []

for year in range(1900, 2101):
    for month in range(1, 13):
        for day in range(1, 32):
            y = str(year)
            m = zero_pad(month)
            d = zero_pad(day)
            dates.append(f"{y}-{m}-{d}")

# Qmonusのレスポンス
context.session.finish({
    "dates": dates

def zero_pad(n):
    return "0" + str(n) if n < 10 else str(n)

dates = []

for year in range(1900, 2101):
    for month in range(1, 13):
        for day in range(1, 32):
            y = str(year)
            m = zero_pad(month)
            d = zero_pad(day)
            date_str = f"{y}-{m}-{d}"
            dates.append(date_str)

# クエリパラメータを取得 (?from=YYYY-MM-DD)
from_date = context.params.get("from")

# from日以降のデータをフィルタリング（指定がある場合のみ）
if from_date:
    dates = [d for d in dates if d >= from_date]

# 上限を20件に間引き（ランダムではないが散らばる）
total = len(dates)
if total > 20:
    interval = total // 20
    dates = [dates[i] for i in range(0, total, interval)][:20]

# 結果を返す
context.session.finish({
    "dates": dates
})

def zero_pad(n):
    return "0" + str(n) if n < 10 else str(n)

dates = []


import ipaddress

# 192.168.0.0/16 のネットワークから最初の100個のIPを生成
network = ipaddress.IPv4Network("192.168.0.0/16")
ip_list = [str(ip) for ip in network.hosts()][:100]

# 表示
for ip in ip_list:
    print(ip)

for year in range(1900, 2101):
    for month in range(1, 13):
        for day in range(1, 32):
            # 2月・30日までの月を考慮
            if month == 2 and day > 28:
                continue
            if month in [4, 6, 9, 11] and day > 30:
                continue

            y = str(year)
            m = zero_pad(month)
            d = zero_pad(day)
            date_str = f"{y}-{m}-{d}"
            dates.append(date_str)

import ipaddress

# 192.168.0.0/16 のネットワークから最初の100個のIPを生成
network = ipaddress.IPv4Network("192.168.0.0/16")
ip_list = [str(ip) for ip in network.hosts()][:100]

# 表示
for ip in ip_list:
    print(ip)
